{"version":3,"file":"static/js/109.bbe0d5bc.chunk.js","mappings":"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","sources":["components/common/cards/Cards.tsx","components/common/message/Alert.tsx","components/common/message/WrappedTooltips.tsx","components/pages/rtk/JokeQueryGenerator.tsx","components/pages/rtk/JokeQLGenerator.tsx","components/pages/rtk/TodoFormComponent.tsx","components/pages/rtk/CreateTodo.tsx","components/pages/rtk/JokeThunkGenerator.tsx","components/pages/rtk/UpdateTodo.tsx","components/common/cards/todo-card/TodoCard.tsx","components/pages/rtk/RTKpage.tsx","redux/hooks.ts"],"sourcesContent":["import React from 'react';\r\nimport Container from 'react-bootstrap/Container';\r\nimport './cards.scss';\r\n\r\ntype CardsProps<T> = {\r\n  dataArr: T[];\r\n  renderCard: (data: T) => React.ReactNode;\r\n};\r\n\r\nfunction Cards<T>({ dataArr, renderCard }: CardsProps<T>) {\r\n  return (\r\n    <Container className=\"mt-3 mb-3\">\r\n      <div className=\"cards-group\">{dataArr.map(renderCard)}</div>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Cards;\r\n","import { Alert as BootstrapAlert, AlertProps } from 'react-bootstrap';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\ninterface IAlert extends Partial<AlertProps> {\r\n  message: string;\r\n  setMessage: React.Dispatch<React.SetStateAction<string>>;\r\n  duration?: number;\r\n}\r\n// props for varaint...\r\nfunction Alert({\r\n  message,\r\n  setMessage,\r\n  duration = 3,\r\n  variant = 'danger',\r\n  ...props\r\n}: IAlert) {\r\n  // clear message after duration timeout\r\n  useEffect(() => {\r\n    if (message) {\r\n      const id = setTimeout(() => {\r\n        setMessage('');\r\n      }, duration * 1000);\r\n      return () => {\r\n        clearTimeout(id);\r\n      };\r\n    }\r\n  }, [message]);\r\n\r\n  return (\r\n    <BootstrapAlert\r\n      {...props}\r\n      variant={variant}\r\n      show={!!message}\r\n      style={{\r\n        minWidth: '16rem',\r\n        position: 'absolute',\r\n        top: '1.5rem',\r\n        left: '50vw',\r\n        transform: 'translateX(-50%)',\r\n      }}\r\n    >\r\n      {message}\r\n    </BootstrapAlert>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import OverlayTrigger, {\r\n  OverlayTriggerProps,\r\n} from 'react-bootstrap/OverlayTrigger';\r\nimport Tooltip from 'react-bootstrap/Tooltip';\r\nimport React, { Fragment } from 'react';\r\nimport { Placement } from 'react-bootstrap/esm/types';\r\nimport './WrappedTooltips.scss';\r\n\r\ninterface WrappedTooltips {\r\n  content: string;\r\n  children: JSX.Element;\r\n  placement?: Placement;\r\n}\r\n\r\nfunction WrappedTooltips({\r\n  content,\r\n  children,\r\n  placement = 'right',\r\n}: WrappedTooltips) {\r\n  const renderTooltip = (props: Partial<OverlayTriggerProps>) => (\r\n    <Tooltip className=\"tooltip\" {...props}>\r\n      <div>{content}</div>\r\n    </Tooltip>\r\n  );\r\n\r\n  return (\r\n    <OverlayTrigger\r\n      placement={placement}\r\n      delay={{ show: 250, hide: 400 }}\r\n      overlay={renderTooltip}\r\n    >\r\n      {children}\r\n    </OverlayTrigger>\r\n  );\r\n}\r\n\r\nexport default WrappedTooltips;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useGetRandomJokeQuery } from '../../../redux/apis/joke/jokeApi';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport { createOneTodo } from '../../../redux/features/todos/todosSlice';\r\nimport { v4 as v4uuid } from 'uuid';\r\nimport Alert from '../../common/message/Alert';\r\nimport WrappedTooltips from '../../common/message/WrappedTooltips';\r\n\r\nfunction JokeQueryGenerator() {\r\n  const dispatch = useAppDispatch();\r\n  const [isSkipped, setIsSkipped] = useState<boolean>(true);\r\n  const [errorMessage, setErrorMessage] = useState<string>('');\r\n  // skip for prevent fetch data onmount\r\n  const properties = useGetRandomJokeQuery(undefined, { skip: isSkipped });\r\n  const { data, error, isLoading, refetch } = properties;\r\n  useEffect(() => {\r\n    if (error) {\r\n      if ('error' in error && typeof error.error === 'string') {\r\n        setErrorMessage(error.error);\r\n      } else {\r\n        setErrorMessage('something went wrong');\r\n      }\r\n    }\r\n  }, [error]);\r\n  useEffect(() => {\r\n    if (data?.joke) {\r\n      dispatch(\r\n        createOneTodo({\r\n          id: v4uuid(),\r\n          title: 'Read a joke',\r\n          content: data.joke,\r\n          createAt: new Date().getTime(),\r\n        })\r\n      );\r\n    }\r\n  }, [data]);\r\n\r\n  function generateTodoJoke() {\r\n    if (isSkipped) {\r\n      setIsSkipped(false);\r\n    } else {\r\n      refetch();\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Alert setMessage={setErrorMessage} message={errorMessage} />\r\n      <WrappedTooltips\r\n        content=\"First fetch a thrid party joke API with redux toolkit query then create a todo card with the response data\"\r\n        placement=\"top\"\r\n      >\r\n        <Button\r\n          className=\"todo-button\"\r\n          style={{ marginLeft: '1rem' }}\r\n          variant=\"secondary\"\r\n          onClick={generateTodoJoke}\r\n        >\r\n          Fetch Joke with RTK Query\r\n        </Button>\r\n      </WrappedTooltips>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default JokeQueryGenerator;\r\n","import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useGetRandomJokeQLQuery } from '../../../redux/graphql/joke/jokeApiQL';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport { createOneTodo } from '../../../redux/features/todos/todosSlice';\r\nimport { v4 as v4uuid } from 'uuid';\r\nimport Form from 'react-bootstrap/Form';\r\nimport './jokeQLGenerator.scss';\r\nimport { JokeQLOptions, JokeQLKey } from '../../../redux/graphql/joke/types';\r\nimport Alert from '../../common/message/Alert';\r\nimport WrappedTooltips from '../../common/message/WrappedTooltips';\r\n\r\nfunction JokeQLGenerator() {\r\n  const dispatch = useAppDispatch();\r\n  const [errorMessage, setErrorMessage] = useState<string>('');\r\n  const [isSkipped, setIsSkipped] = useState<boolean>(true);\r\n  // skip for prevent fetch data onmount\r\n  const [jokeOptions, setJokeOptions] = useState<JokeQLOptions>({\r\n    id: true,\r\n    joke: true,\r\n    permalink: true,\r\n  });\r\n  const properties = useGetRandomJokeQLQuery(jokeOptions, { skip: isSkipped });\r\n\r\n  const { data, error, isLoading, refetch } = properties;\r\n  useEffect(() => {\r\n    if (error && 'error' in error) {\r\n      const message =\r\n        typeof error.error === 'string' ? error.error : 'something went wrong';\r\n      setErrorMessage(message);\r\n    } else {\r\n      if (error) {\r\n        setErrorMessage('something went wrong');\r\n      }\r\n    }\r\n  }, [error]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { id, joke, permalink } = data;\r\n      const content = `${id ? 'joke id: ' + id + '\\r\\n' : ''} ${\r\n        joke ? joke + '\\r\\n' : ''\r\n      } ${permalink ? 'joke link: ' + permalink : ''}`;\r\n\r\n      dispatch(\r\n        createOneTodo({\r\n          id: v4uuid(),\r\n          title: 'Read a joke',\r\n          content,\r\n          createAt: new Date().getTime(),\r\n        })\r\n      );\r\n    }\r\n  }, [data]);\r\n\r\n  function generateTodoJoke() {\r\n    if (isSkipped) {\r\n      setIsSkipped(false);\r\n    } else {\r\n      refetch();\r\n    }\r\n  }\r\n  function onOptionChange(event: React.ChangeEvent<HTMLInputElement>): void {\r\n    setIsSkipped(true); // prevent fetch data while selecting checkbox\r\n    const option = event.target.id as JokeQLKey;\r\n    setJokeOptions({ ...jokeOptions, [option]: !jokeOptions[option] });\r\n  }\r\n  return (\r\n    <Form className=\"fetch-joke-options\">\r\n      <Alert setMessage={setErrorMessage} message={errorMessage} />\r\n      <WrappedTooltips\r\n        content=\"Fetch a thrid party joke graphql API with redux toolkit query. There are 3 radio options that are used to configure the graphql query\"\r\n        placement=\"top\"\r\n      >\r\n        <Button\r\n          className=\"todo-button\"\r\n          style={{ margin: '1rem' }}\r\n          onClick={generateTodoJoke}\r\n        >\r\n          Fetch Joke graphql\r\n        </Button>\r\n      </WrappedTooltips>\r\n      <div className=\"check-group\">\r\n        <Form.Check\r\n          inline\r\n          label=\"joke id\"\r\n          id=\"id\"\r\n          name=\"jokeId\"\r\n          disabled={!jokeOptions['joke'] && !jokeOptions['permalink']}\r\n          checked={jokeOptions['id']}\r\n          onChange={onOptionChange}\r\n        ></Form.Check>\r\n        <Form.Check\r\n          inline\r\n          label=\"joke content\"\r\n          id=\"joke\"\r\n          name=\"joke content\"\r\n          checked={jokeOptions['joke']}\r\n          disabled={!jokeOptions['id'] && !jokeOptions['permalink']}\r\n          onChange={onOptionChange}\r\n        ></Form.Check>\r\n        <Form.Check\r\n          inline\r\n          label=\"permalink\"\r\n          id=\"permalink\"\r\n          name=\"permalink\"\r\n          checked={jokeOptions['permalink']}\r\n          disabled={!jokeOptions['id'] && !jokeOptions['joke']}\r\n          onChange={onOptionChange}\r\n        ></Form.Check>\r\n      </div>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default JokeQLGenerator;\r\n","import React, { FormEvent, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport BootstrapForm from 'react-bootstrap/Form';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport {\r\n  createOneTodo,\r\n  updateOneTodo,\r\n  TodoForm,\r\n  TodoState,\r\n} from '../../../redux/features/todos/todosSlice';\r\nimport JokeQLGenerator from './JokeQLGenerator';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport {\r\n  Formik,\r\n  FormikHelpers,\r\n  FormikProps,\r\n  Form,\r\n  Field,\r\n  FieldProps,\r\n} from 'formik';\r\nimport JokeGenerator from './JokeQueryGenerator';\r\nimport { ActionCreatorWithPayload } from '@reduxjs/toolkit/dist/createAction';\r\n\r\ninterface TodoFormErrors {\r\n  title?: string;\r\n  content?: string;\r\n}\r\n\r\ninterface TodoFormComponentProps {\r\n  isModalShown: boolean;\r\n  setIsModalShown: React.Dispatch<React.SetStateAction<boolean>>;\r\n  type: 'Create' | 'Edit';\r\n  initalValue?: TodoState;\r\n  renderButton: (callback: () => void) => JSX.Element;\r\n}\r\n\r\nfunction TodoFormComponent({\r\n  isModalShown,\r\n  setIsModalShown,\r\n  type,\r\n  initalValue,\r\n  renderButton,\r\n}: TodoFormComponentProps) {\r\n  const dispatch = useAppDispatch();\r\n  const initialValues: TodoForm = {\r\n    title: initalValue ? initalValue.title : '',\r\n    content: initalValue ? initalValue.content : '',\r\n  };\r\n\r\n  function handleModalShow() {\r\n    setIsModalShown(true);\r\n  }\r\n  function hanldeModalClose() {\r\n    setIsModalShown(false);\r\n  }\r\n\r\n  function handleValidation(values: TodoForm) {\r\n    const { title, content } = values;\r\n    const errors: TodoFormErrors = {};\r\n    if (!title) {\r\n      errors.title = 'Title is required';\r\n    } else if (title.length < 5) errors.title = 'Input at least 5 letters';\r\n    if (!content) {\r\n      errors.content = 'Content is required';\r\n    } else if (content.length < 5) errors.content = 'Input at least 5 letters';\r\n    return errors;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {renderButton(handleModalShow)}\r\n      <Modal\r\n        show={isModalShown}\r\n        onHide={hanldeModalClose}\r\n        backdrop=\"static\"\r\n        keyboard={false}\r\n      >\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>{type} a todo task</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Formik\r\n            initialValues={initialValues}\r\n            validate={handleValidation}\r\n            onSubmit={(values, actions) => {\r\n              const { title, content } = values;\r\n              // dispatch createOneTodo action\r\n              // check now is editing or creating\r\n              // dispatch(todoAction())\r\n              if (type === 'Create') {\r\n                dispatch(\r\n                  createOneTodo({\r\n                    id: uuidv4(),\r\n                    title,\r\n                    content,\r\n                    createAt: new Date().getTime(),\r\n                  })\r\n                );\r\n                hanldeModalClose();\r\n                actions.setSubmitting(false);\r\n              } else {\r\n                dispatch(\r\n                  updateOneTodo({\r\n                    id: initalValue!.id,\r\n                    title,\r\n                    content,\r\n                  })\r\n                );\r\n              }\r\n              hanldeModalClose();\r\n              actions.setSubmitting(false);\r\n            }}\r\n          >\r\n            {({\r\n              values,\r\n              errors,\r\n              touched,\r\n              handleChange,\r\n              handleSubmit,\r\n              isSubmitting,\r\n            }) => (\r\n              <BootstrapForm\r\n                noValidate\r\n                id=\"todo-form\"\r\n                role=\"form\"\r\n                onSubmit={handleSubmit}\r\n              >\r\n                <BootstrapForm.Group className=\"mb-3\" controlId=\"todoTitle\">\r\n                  <BootstrapForm.Label>Title</BootstrapForm.Label>\r\n                  <BootstrapForm.Control\r\n                    type=\"text\"\r\n                    name=\"title\"\r\n                    required\r\n                    isInvalid={!!touched.title && !!errors.title}\r\n                    value={values.title}\r\n                    onChange={handleChange}\r\n                    placeholder=\"enter title\"\r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.title}</div>\r\n                </BootstrapForm.Group>\r\n\r\n                <BootstrapForm.Group controlId=\"todoContent\">\r\n                  <BootstrapForm.Label>Content</BootstrapForm.Label>\r\n                  <BootstrapForm.Control\r\n                    as=\"textarea\"\r\n                    name=\"content\"\r\n                    value={values.content}\r\n                    rows={5}\r\n                    isInvalid={!!touched.content && !!errors.content}\r\n                    maxLength={150}\r\n                    onChange={handleChange}\r\n                    placeholder=\"enter todo task content\"\r\n                  />\r\n                  <div className=\"invalid-feedback\">{errors.content}</div>\r\n                </BootstrapForm.Group>\r\n              </BootstrapForm>\r\n            )}\r\n          </Formik>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"danger\" onClick={hanldeModalClose}>\r\n            Cancel\r\n          </Button>\r\n          <Button variant=\"primary\" form=\"todo-form\" type=\"submit\">\r\n            Submit\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default TodoFormComponent;\r\n","import React, { useState } from 'react';\r\nimport TodoFormComponent from './TodoFormComponent';\r\nimport { Button } from 'react-bootstrap';\r\nimport WrappedTooltips from '../../common/message/WrappedTooltips';\r\n\r\nfunction CreateTodo() {\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n\r\n  function createTodoButton(callback: () => void) {\r\n    return (\r\n      <WrappedTooltips\r\n        content=\"Create a todo card with redux-toolkit\"\r\n        placement=\"top\"\r\n      >\r\n        <Button variant=\"success\" className=\"todo-button\" onClick={callback}>\r\n          Create\r\n        </Button>\r\n      </WrappedTooltips>\r\n    );\r\n  }\r\n  return (\r\n    <TodoFormComponent\r\n      isModalShown={isModalShown}\r\n      setIsModalShown={setIsModalShown}\r\n      type=\"Create\"\r\n      renderButton={createTodoButton}\r\n    />\r\n  );\r\n}\r\n\r\nexport default CreateTodo;\r\n","import { SerializedError } from '@reduxjs/toolkit';\r\nimport React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { fetchRandomJoke } from '../../../redux/features/todos/todosSlice';\r\nimport { useAppDispatch } from '../../../redux/hooks';\r\nimport Alert from '../../common/message/Alert';\r\nimport WrappedTooltips from '../../common/message/WrappedTooltips';\r\n\r\nfunction JokeThunkGenerator() {\r\n  const dispatch = useAppDispatch();\r\n  const [errorMessage, setErrorMessage] = useState<string>('');\r\n  // skip for prevent fetch data onmount\r\n\r\n  async function generateTodoJoke() {\r\n    try {\r\n      await dispatch(fetchRandomJoke()).unwrap();\r\n    } catch (err: SerializedError | unknown) {\r\n      if (\r\n        err &&\r\n        typeof err === 'object' &&\r\n        'message' in err &&\r\n        typeof err.message === 'string'\r\n      ) {\r\n        setErrorMessage(err.message);\r\n      } else {\r\n        // general error\r\n        setErrorMessage('Something went wrong');\r\n      }\r\n    }\r\n  }\r\n  return (\r\n    <>\r\n      <Alert setMessage={setErrorMessage} message={errorMessage} />\r\n      <WrappedTooltips\r\n        content=\"First fetch a thrid party joke API with redux toolkit thunk then create a todo card with the response data\"\r\n        placement=\"top\"\r\n      >\r\n        <Button\r\n          variant=\"warning\"\r\n          className=\"todo-button\"\r\n          style={{ marginLeft: '1rem' }}\r\n          onClick={generateTodoJoke}\r\n        >\r\n          Fetch Joke with thunk\r\n        </Button>\r\n      </WrappedTooltips>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default JokeThunkGenerator;\r\n","import React, { useState } from 'react';\r\nimport TodoFormComponent from './TodoFormComponent';\r\nimport {\r\n  TodoState,\r\n  updateOneTodo,\r\n} from '../../../redux/features/todos/todosSlice';\r\nimport { PencilSquare } from 'react-bootstrap-icons';\r\n\r\ninterface UpdateTodo {\r\n  todoState: TodoState;\r\n}\r\n\r\nfunction UpdateTodo({ todoState }: UpdateTodo) {\r\n  const [isModalShown, setIsModalShown] = useState<boolean>(false);\r\n  function renderTodoButton(callback: () => void) {\r\n    return (\r\n      <div className=\"edit-todo\" aria-label=\"edit-todo\">\r\n        <PencilSquare onClick={callback} />\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <TodoFormComponent\r\n      isModalShown={isModalShown}\r\n      setIsModalShown={setIsModalShown}\r\n      type={'Edit'}\r\n      initalValue={todoState}\r\n      renderButton={renderTodoButton}\r\n    />\r\n  );\r\n}\r\n\r\nexport default UpdateTodo;\r\n","import React from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport { TodoState } from '../../../../redux/features/todos/todosSlice';\r\nimport './todo-card.scss';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { useAppDispatch } from '../../../../redux/hooks';\r\nimport { deleteOneTodo } from '../../../../redux/features/todos/todosSlice';\r\nimport UpdateTodo from '../../../pages/rtk/UpdateTodo';\r\nimport { XSquareFill } from 'react-bootstrap-icons';\r\nimport WrappedTooltips from '../../message/WrappedTooltips';\r\n\r\ntype CardProps<T> = {\r\n  todoState: T;\r\n};\r\n\r\nfunction TodoCard<T extends TodoState>({ todoState }: CardProps<T>) {\r\n  const dispatch = useAppDispatch();\r\n  const { title, content, id, createAt } = todoState;\r\n  const parsedTime = new Date(createAt);\r\n  function handleDeleteTodo(): void {\r\n    dispatch(deleteOneTodo(id));\r\n  }\r\n  function renderContent(content: string) {\r\n    const jokeUrlInd = content.indexOf(\r\n      'joke link: https://icanhazdadjoke.com/'\r\n    );\r\n    if (jokeUrlInd === -1) {\r\n      return <p>{content}</p>;\r\n    }\r\n    const jokeUrl = content.substring(jokeUrlInd + 11);\r\n\r\n    return (\r\n      <p>\r\n        {content.substring(0, jokeUrlInd)}\r\n        <a href={jokeUrl}>\r\n          <Button variant=\"outline-primary\" size=\"sm\" className=\"mt-2 mb-2\">\r\n            Source\r\n          </Button>\r\n        </a>\r\n      </p>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className=\"todo-card\">\r\n      <Card.Header>\r\n        <WrappedTooltips content={title} placement=\"top\">\r\n          <h5>{title}</h5>\r\n        </WrappedTooltips>\r\n        <UpdateTodo todoState={todoState} />\r\n        <div className=\"delete\" aria-label=\"Delete\">\r\n          <XSquareFill onClick={handleDeleteTodo} />\r\n        </div>\r\n      </Card.Header>\r\n      <Card.Body>\r\n        <blockquote className=\"blockquote mb-0\">\r\n          {renderContent(content)}\r\n          <footer className=\"blockquote-footer\">\r\n            created at <span>{parsedTime.toISOString()}</span>\r\n          </footer>\r\n        </blockquote>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\nexport default TodoCard;\r\n","import React from 'react';\r\nimport JokeQueryGenerator from './JokeQueryGenerator';\r\nimport JokeQLGenerator from './JokeQLGenerator';\r\nimport Cards from '../../common/cards/Cards';\r\nimport CreateTodo from './CreateTodo';\r\nimport JokeThunkGenerator from './JokeThunkGenerator';\r\nimport './rtkPage.scss';\r\nimport { useAppSelector } from '../../../redux/hooks';\r\nimport { RootState } from '../../../redux/store';\r\nimport TodoCard from '../../common/cards/todo-card/TodoCard';\r\nimport WrappedTooltips from '../../common/message/WrappedTooltips';\r\n\r\nconst RTKpage = () => {\r\n  const todos = useAppSelector((state: RootState) => state.todos.todos);\r\n\r\n  return (\r\n    <div className=\"rtk-page\">\r\n      <h1>RTK page</h1>\r\n      <h3>Add a new todo task</h3>\r\n      <CreateTodo />\r\n\r\n      <JokeQueryGenerator />\r\n      <JokeThunkGenerator />\r\n      <JokeQLGenerator />\r\n\r\n      <Cards\r\n        dataArr={todos}\r\n        renderCard={(data) => {\r\n          return <TodoCard todoState={data} key={data.id} />;\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RTKpage;\r\n","import { useDispatch, useSelector } from 'react-redux';\r\nimport type { TypedUseSelectorHook } from 'react-redux';\r\nimport type { RootState, AppDispatch } from './store';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n"],"names":["dataArr","renderCard","Container","className","map","message","setMessage","duration","variant","props","useEffect","id","setTimeout","clearTimeout","show","style","minWidth","position","top","left","transform","content","children","placement","OverlayTrigger","delay","hide","overlay","Tooltip","dispatch","useAppDispatch","useState","isSkipped","setIsSkipped","errorMessage","setErrorMessage","properties","useGetRandomJokeQuery","undefined","skip","data","error","refetch","isLoading","joke","createOneTodo","v4uuid","title","createAt","Date","getTime","Alert","WrappedTooltips","Button","marginLeft","onClick","permalink","jokeOptions","setJokeOptions","useGetRandomJokeQLQuery","onOptionChange","event","option","target","Form","margin","inline","label","name","disabled","checked","onChange","isModalShown","setIsModalShown","type","initalValue","renderButton","initialValues","hanldeModalClose","Modal","onHide","backdrop","keyboard","closeButton","validate","values","errors","length","onSubmit","actions","uuidv4","setSubmitting","updateOneTodo","touched","handleChange","handleSubmit","isSubmitting","noValidate","role","controlId","required","isInvalid","value","placeholder","as","rows","maxLength","form","callback","fetchRandomJoke","unwrap","todoState","parsedTime","Card","deleteOneTodo","jokeUrlInd","indexOf","jokeUrl","substring","href","size","renderContent","toISOString","todos","useAppSelector","state","Cards","useDispatch","useSelector"],"sourceRoot":""}