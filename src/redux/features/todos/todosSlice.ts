import { createSlice } from '@reduxjs/toolkit';
import type { PayloadAction } from '@reduxjs/toolkit';
import type { RootState } from '../../store';

export enum TodoPhase {
  pending = 'pending',
  processing = 'processing',
  finished = 'finished',
  canceled = 'canceled',
}

export interface TodoForm {
  title: string;
  content: string;
}

export interface TodoState extends TodoForm {
  id: string;
  phase?: TodoPhase;
  createAt: number; // new Date().getTime()
}

interface TodosState {
  todos: TodoState[];
}

const initialState: TodosState = { todos: [] };

export const todosSlice = createSlice({
  name: ' todos',
  initialState,
  reducers: {
    // reducer should be pure function so it is not suppoed to generated id
    // ideally, the id should be generated by backend
    createOneTodo: (state, action: PayloadAction<TodoState>) => {
      const newTodo = action.payload;
      newTodo.phase = TodoPhase.pending;
      state.todos = [...state.todos, newTodo];
    },
    updateOneTodo: (state, action: PayloadAction<Partial<TodoState>>) => {
      const { content, title, id } = action.payload;
      state.todos = state.todos.map((todo) => {
        if (todo.id === id) {
          todo.content = content ? content : todo.content;
          todo.title = title ? title : todo.title;
        }
        return todo;
      });
    },
    deleteOneTodo: (state, action: PayloadAction<string>) => {
      state.todos = state.todos.filter((todo) => todo.id !== action.payload);
    },
    deleteAllTodos: (state) => {
      state.todos = [];
    },
  },
});

export const { createOneTodo, deleteOneTodo, deleteAllTodos, updateOneTodo } =
  todosSlice.actions;

export const selectTodos = (state: RootState) => state.todos.todos;

export default todosSlice.reducer;
